import django
import os
import django


os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"
django.setup()
# ______________________________________________________________________________________________________________________
import logging

from aiogram.dispatcher.filters import Command, Text
from aiogram import executor
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from config.settings import DISPATCHER
from aiogram.types import Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher import FSMContext

from bot.service import MarketClient, Market, get_manufacturers_names, get_products_names, get_modifications_names, \
    get_products_by_manufacturer, get_modifications_sw_by_product
from bot.keyboard import ManufacturerKeyboard, ProductKeyboard, set_main_menu
from bot.states import RetailSaleState
import aiogram.utils.markdown as fmt

logging.basicConfig(level=logging.INFO)

manufacturers = get_manufacturers_names()
products = get_products_names()
modifications = get_modifications_names()
market_requests = Market()
retail_sale = RetailSaleState()


async def delete_old_keyboard(object):
    await object.answer(text=object.text, reply_markup=ReplyKeyboardRemove())


def user_is_client(func):
    async def wrapper(message: Message, *args, **kwargs):
        user = MarketClient(message)
        if user.auth():
            await func(message)
        else:
            await message.answer(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ–ø–µ—Ä–∞—Ç–æ—Ä—É')
    return wrapper


@DISPATCHER.message_handler(text=['–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é'])
async def registration_request(message: Message):
    user = MarketClient(message)
    if user.create_registration_request():
        await message.answer(text='–ó–∞–ø—Ä–æ—Å –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    else:
        await message.answer(text='–í–∞—à –∑–∞–ø—Ä–æ—Å –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ')


@DISPATCHER.message_handler(Command(['market']), state='*')
@user_is_client
async def market(message: Message, state: FSMContext=None):
    if state:
        await state.reset_state(with_data=True)
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton(text='–†–æ–∑–Ω–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞'))
    keyboard.add(KeyboardButton(text='–û–ø—Ç–æ–≤–∞—è –ø—Ä–æ–¥–∞–∂–∞'))
    await message.answer(text='‚Ñ¢Ô∏è', reply_markup=keyboard)


@DISPATCHER.message_handler(text=['–†–æ–∑–Ω–∏—á–Ω–∞—è –ø—Ä–æ–¥–∞–∂–∞', '0Ô∏è‚É£ –ù–∞–∑–∞–¥'], state='*')
# @user_is_client
async def retail_sale_entry(message: Message, state: FSMContext):
    if message.text == '0Ô∏è‚É£ –ù–∞–∑–∞–¥':
        await state.reset_state(with_data=True)
    manufacturers_names = market_requests.get_manufacturers_names()
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    for name in manufacturers_names:
        keyboard.add(KeyboardButton(text=name))
    await message.answer(text='–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π üìÑ', reply_markup=keyboard)
    await state.set_state(retail_sale.waiting_manufacturer_name.state)


@DISPATCHER.message_handler(text=manufacturers, state=[retail_sale.waiting_manufacturer_name.state, retail_sale.waiting_modification_name])
async def show_products_for_retail(message: Message, state: FSMContext):
    if message.text == '1Ô∏è‚É£ –ù–∞–∑–∞–¥':
        data = await state.get_data()
        products = market_requests.get_products_by_manufacturer(data['manufacturer_name'])
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        keyboard.add(KeyboardButton(text='0Ô∏è‚É£ –ù–∞–∑–∞–¥'))
        for product in products:
            keyboard.add(KeyboardButton(text=product))
        await message.answer(text='–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–∞', reply_markup=keyboard)
        await state.set_state(retail_sale.waiting_product_name)

    else:
        async with state.proxy() as data:
            data['manufacturer_name'] = message.text
        products = market_requests.get_products_by_manufacturer(data['manufacturer_name'])
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
        keyboard.add(KeyboardButton(text='0Ô∏è‚É£ –ù–∞–∑–∞–¥'))
        for product in products:
            keyboard.add(KeyboardButton(text=product))
        await message.answer(text='–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–∞', reply_markup=keyboard)
        await state.set_state(retail_sale.waiting_product_name)


@DISPATCHER.message_handler(text=products, state=retail_sale.waiting_product_name)
async def show_modifications_by_product(message: Message, state: FSMContext):
    user = MarketClient(message)
    async with state.proxy() as data:
        data['product_name'] = message.text
    modifications = market_requests.get_modifications_by_product(data['product_name'], message)
    modifications_names = [modification.specifications for modification in modifications]
    if user.user_status() == 'sw':
        price = [modification.specifications + ' - ' + str(modification.price_dollar) + ' usd' for modification in modifications]
    else:
        price = [modification.specifications + ' - ' + str(modification.price_rub) + ' rur' for modification in modifications]
    async with state.proxy() as data:
        data['price'] = price
        print(data['price'])
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True, selective=True)
    keyboard.add(KeyboardButton(text='1Ô∏è‚É£ –ù–∞–∑–∞–¥'))
    keyboard.add(KeyboardButton(text='üìÑ –ü—Ä–∞–π—Å'))
    for modification in modifications_names:
        keyboard.add(KeyboardButton(text=modification))
    await message.answer(text='–°–ø–∏—Å–æ–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π', reply_markup=keyboard)
    await state.set_state(retail_sale.waiting_modification_name)


@DISPATCHER.message_handler(text=modifications, state=[retail_sale.waiting_modification_name])
async def retail_modification_quantity(message: Message, state: FSMContext):
    client = MarketClient(message)
    cart = client.get_or_create_cart()
    print(cart.id)
    async with state.proxy() as data:
        data['modification_name'] = message.text
        data['cart_id'] = cart.id
    await message.answer(f'–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä {message.text} –≤ –∫–æ—Ä–∑–∏–Ω—É', reply_markup=ReplyKeyboardRemove())
    await state.set_state(retail_sale.waiting_quantity)


@DISPATCHER.message_handler(lambda message: message.text.isdigit(), state=[retail_sale.waiting_quantity])
async def retail_quantity(message: Message, state: FSMContext):
    client = MarketClient(message)
    data = await state.get_data()
    product = client.get_product_modification(data['modification_name'])
    price = client.get_product_price(data['modification_name'])
    client.add_product_to_cart(product, price, quantity=int(message.text))
    await message.answer(text=f'–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ {message.text}  —à—Ç—É–∫ {data["modification_name"]}', reply_markup=ReplyKeyboardRemove())


@DISPATCHER.message_handler(text='üìÑ –ü—Ä–∞–π—Å', state=retail_sale.waiting_modification_name)
async def retail_price(message: Message, state: FSMContext):
    data = await state.get_data()
    price = fmt.text(*data['price'])
    await message.answer(price)
    await state.set_state()


@DISPATCHER.message_handler(text='–ö–æ—Ä–∑–∏–Ω–∞', state='*')
async def show_cart(message: Message):
    user = MarketClient(message)
    cart = user.show_cart()
    products = fmt.text(*[product.product.specifications for product in cart])
    await message.answer(products)



# @DISPATCHER.message_handler(text=manufacturers, state='*')
# async def product_by_manufacturer(message: Message, state: FSMContext):
#     await state.set_state(MarketState.waiting_select_product.state)
#     async with state.proxy() as data:
#         data['select_manufacturer'] = message.text
#     products_names = get_products_by_manufacturer(message.text)
#     keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
#     keyboard.add(KeyboardButton(text='0Ô∏è‚É£ –ù–∞–∑–∞–¥'))
#     for name in products_names:
#         keyboard.add(KeyboardButton(text=name))
#     await message.answer(text='–°–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤', reply_markup=keyboard)
#
#
# @DISPATCHER.message_handler(text=products, state='*')
# async def modifications_by_product(message: Message, state: FSMContext):
#     await state.update_data(product=str(message.text))
#     modifications_names = get_modifications_by_product(message.text)
#     keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
#     keyboard.add()
#     keyboard.add(KeyboardButton(text='0Ô∏è‚É£ –ù–∞–∑–∞–¥'))
#     keyboard.add(KeyboardButton(text='üóí –ü—Ä–∞–π—Å'))
#     for name in modifications_names:
#         keyboard.add(KeyboardButton(text=name))
#     await message.answer(text='–°–ø–∏—Å–æ–∫ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–π', reply_markup=keyboard)
#
#
# @DISPATCHER.message_handler(text='üóí –ü—Ä–∞–π—Å', state='*')
# async def show_price(message: Message, state: FSMContext):
#     data = await state.get_data()


# @DISPATCHER.message_handler(text=manufacturers)
# async def manufacturers
# async def client_registration(message: Message):
#     await delete_old_keyboard(message)
#     user = MarketClient(message)
#     if user.create_registration_request():
#         await message.answer(text='–ó–∞–ø—Ä–æ—Å —Å–æ–∑–¥–∞–Ω, –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –≤–∞–º –æ—Ç–∫—Ä–æ—é—Ç –¥–æ—Å—Ç—É–ø')
#     elif user.auth():
#         await message.answer(text='–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã')
#     else:
#         await message.answer(text='–ó–∞–ø—Ä–æ—Å –≤—Å–µ –µ—â–µ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ')
#
#
# async def market_entry(message: Message):
#     user = MarketClient(message)
#     if user.auth():
#         keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
#         buttons = ['–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏', '–¢–æ–≤–∞—Ä—ã', '–ö–æ—Ä–∑–∏–Ω–∞']
#         for button in buttons:
#             keyboard.add(KeyboardButton(text=button))
#         await message.answer(text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞', reply_markup=keyboard)
#     else:
#         await message.answer(text='–í–∞—à –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∏–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
#
#
# async def show_manufacturers(message: Message):
#     global manufacturers
#     manufacturers = market.get_manufacturers_names()
#     user = MarketClient(message)
#     if user.auth():
#         keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
#         for name in manufacturers:
#             keyboard.add(KeyboardButton(text=name))
#         await message.answer(text='–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π', reply_markup=keyboard)
#     else:
#         await message.answer(text='–í–∞—à –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∏–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
#
#
# async def show_products_by_manufacturer(message: Message):
#     await delete_old_keyboard(message)
#     global products
#     products = market.get_products_names()
#     user = MarketClient(message)
#     if user.auth():
#         keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
#         keyboard.add(KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è–º'))
#         products_by_manufacturer = market.get_products_by_manufacturer(message.text)
#         for name in products_by_manufacturer:
#             keyboard.add(KeyboardButton(text=name))
#         await message.answer(text=f'–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã –æ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è: {message.text}', reply_markup=keyboard)
#     else:
#         await message.answer(text='–í–∞—à –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∏–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
#
#
# async def show_product_modifications(message: Message):
#     await delete_old_keyboard(message)
#     global modifications
#     modifications = market.get_modifications_names()
#     user = MarketClient(message)
#     if user.auth():
#         keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
#         keyboard.add(KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º'))
#         modifications = market.get_modifications_by_product(message.text)
#         for modification in modifications:
#             keyboard.add(KeyboardButton(text=modification))
#         await message.answer(text=f'–í—Å–µ –ø—Ä–æ–¥—É–∫—Ç—ã: {message.text}', reply_markup=keyboard)
#     else:
#         await message.answer(text='–í–∞—à –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∏–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')
#
#
# async def get_back(message: Message):
#     if message.text == '–ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º':
#         keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
#         keyboard.add(KeyboardButton(text='–ù–∞–∑–∞–¥ –∫ —Ç–æ–≤–∞—Ä–∞–º'))
#         products_by_modification = market.get_products_by_modification(message.text)
#         keyq = message.reply_markup
#         print(keyq)
#         print(products_by_modification)
#         for product in products_by_modification:
#             keyboard.add(KeyboardButton(text=product))
#         await message.answer(text='–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏', reply_markup=keyboard)
#
#
# async def test(message: Message):
#     user = MarketClient(message)
#     if user.auth():
#         keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
#
#         await message.answer(text='')
#     else:
#         await message.answer(text='–í–∞—à –¥–æ—Å—Ç—É–ø –æ–≥—Ä–∞–Ω–∏—á–µ–Ω –∏–ª–∏ –≤—ã –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é')


# _____________________RUN________________________________________________________________
if __name__ == '__main__':
    executor.start_polling(DISPATCHER, skip_updates=True, on_startup=set_main_menu)
